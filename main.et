parser;
interpret;

export {

    of Int -> *String -> Int
    @nomangle fun main argc argv;

}

######################################################################

of *Token -> *Span(Token) -> Bool
fun try_match token span = match peek_first(*span) {
        | .some first:
            get_discriminant(token) == get_discriminant(&first)
        | .none: false
    };


of *Token -> Int
fun get_discriminant token = *(token ~> *Int);


######################################################################


fun main argc argv = {
    if argc == 1 then return 0;

    var tokens = tokenize(argv[1]);

    var span = make_span(tokens);

    var ast = parse_expr(&span);
    print("%d\n", interpret(ast));

    0
};

